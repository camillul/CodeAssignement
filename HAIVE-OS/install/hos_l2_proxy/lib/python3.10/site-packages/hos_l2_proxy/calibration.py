from dataclasses import (dataclass, field)
from typing import (Dict, List, Tuple)


from hos_l2_proxy.common import (DeviceType, ContainerPosition)


# Needs to be initialized by L2ProxyNode before calling generator functions
data = None


@dataclass
class SlotCalibration:
  slot: ContainerPosition
  container_type: DeviceType
  container_index: Tuple[int,int]
  calibration: Tuple[float,float]
  endeffector_type: DeviceType = None

@dataclass
class DeviceCalibration:
  device_id: str
  slot_calibrations: List[SlotCalibration] = field(default_factory=lambda: [])

@dataclass
class CalibrationData():
  device_calibrations: Dict[str, DeviceCalibration] = field(default_factory=lambda: {})  # device_id -> DeviceCalibration

  def get_calibration(self, device_id: str, slot: ContainerPosition, container_type: DeviceType, x_ndx: int, y_ndx: int, endeffector_type: DeviceType = None) -> (float, float, str):
    if device_id not in self.device_calibrations:
      return None, f"CalibrationData.get_calibration: No calibration found for device {device_id}! Please make sure that CalibrationData is initialized correctly."

    device_calibration = self.device_calibrations[device_id]

    slot_calibration_filter = lambda c: c.slot == slot and \
                                        c.container_type == container_type and \
                                        c.container_index[0] == x_ndx and \
                                        c.container_index[1] == y_ndx and \
                                        c.endeffector_type == endeffector_type
    slot_calibration_matches = list(filter(slot_calibration_filter, device_calibration.slot_calibrations))
    if len(slot_calibration_matches) != 1:
      return None, f"CalibrationData.get_calibration({device_id}|{slot}|{container_type}|{(x_ndx,y_ndx)}|{endeffector_type}): Illegal number of calibrations found. Expected 1, but found {len(slot_calibration_matches)}."

    x, y = slot_calibration_matches[0].calibration
    return x, y, ""

  def get_corners(self, device_id: str, slot: ContainerPosition, container_type: DeviceType, endeffector_type: DeviceType = None) -> (List, str):
    if device_id not in self.device_calibrations:
      return None, f"CalibrationData.get_corners: No calibration found for device {device_id}! Please make sure that CalibrationData is initialized correctly."

    device_calibration = self.device_calibrations[device_id]

    slot_calibration_filter = lambda c: c.slot == slot and \
                                        c.container_type == container_type and \
                                        c.endeffector_type == endeffector_type
    slot_calibration_matches = list(filter(slot_calibration_filter, device_calibration.slot_calibrations))

    if not len(slot_calibration_matches):
      return None, f"CalibrationData.get_corners({device_id}|{slot}|{container_type}|{endeffector_type}): Illegal number of calibrations found. Expected 1, but found {len(slot_calibration_matches)}."

    return [c.calibration for c in slot_calibration_matches], ""


def create_calibration_data(calib_dict: object) -> CalibrationData:
  calibration_data = CalibrationData()
  for haive_id, device_calib in calib_dict.items():
    device_calibration = DeviceCalibration(haive_id)
    for slot, slot_calib in device_calib.items():
      for container_type, slot_calib_value in slot_calib.items():
        for slot_calib_key, slot_calib_values in slot_calib_value.items():
          if isinstance(slot_calib_values, dict):
            secondary_attachment = slot_calib_key
            for container_index, index_values in slot_calib_values.items():
              slot_calib = SlotCalibration(ContainerPosition[slot], DeviceType[container_type], eval(container_index), index_values, DeviceType[secondary_attachment])
              device_calibration.slot_calibrations.append(slot_calib)
          else:
            secondary_attachment = None
            container_index = slot_calib_key
            slot_calib = SlotCalibration(ContainerPosition[slot], DeviceType[container_type], eval(container_index), slot_calib_values, secondary_attachment)
            device_calibration.slot_calibrations.append(slot_calib)
    calibration_data.device_calibrations[haive_id] = device_calibration
  return calibration_data
