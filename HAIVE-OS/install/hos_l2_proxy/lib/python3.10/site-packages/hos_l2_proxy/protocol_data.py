import traceback
from dataclasses import (dataclass, field)
from abc import ABC
from typing import (Tuple, List, Dict)

from hos_l2_proxy.common import (Device, DeviceType, ContainerPosition)


@dataclass
class DeviceData(ABC):
  deviceID: str
  device: Device
  deviceType: DeviceType

  def __ne__(self, other):
    return not (self == other)

@dataclass
class ContainerData(DeviceData):
  position: ContainerPosition
  parent: str  # deviceID

  def __hash__(self):
    return hash((self.deviceID, self.device, self.deviceType, self.position, self.parent))

  def __eq__(self, other):
    if other == None:
      return False
    return (self.deviceID, self.device, self.deviceType, self.position, self.parent) == \
           (other.deviceID, other.device, other.deviceType, other.position, other.parent)

@dataclass
class HAIVEData(DeviceData):
  position: Tuple[int, int]
  attachment: DeviceType = None
  tools: List[DeviceType] = field(default_factory=lambda: [])
  containers: List[ContainerData] = field(default_factory=lambda: [])

  def __hash__(self):
    return hash((self.deviceID, self.device, self.deviceType, self.position, self.attachment, self.containers))

  def __eq__(self, other):
    if other == None:
      return False
    return (self.deviceID, self.device, self.deviceType, self.position, self.attachment, self.containers) == \
           (other.deviceID, other.device, other.deviceType, other.position, other.attachment, other.containers)


JSON_LAYOUT_KEY = 'layout'
JSON_LAYOUT_NAME_KEY = 'name'
JSON_LAYOUT_DATA_KEY = 'data'
JSON_PROTOCOL_KEY = 'protocol'
JSON_HAIVE_ID_KEY = 'haiveID'
JSON_HAIVE_POS_KEY = 'haivePosition'
JSON_ATTACH_KEY = 'attachment'
JSON_TOOLS_KEY = 'tools'
JSON_CTN_IDS_KEY = 'containerIDs'
JSON_CTN_POS_KEY = 'containerPositions'
JSON_CMD_TYPE_KEY = 'CommandType'
JSON_CMD_NAME_KEY = 'CommandName'
JSON_CMD_ARGS_KEY = 'Args'
JSON_CMD_GSS_KEY = 'gssRow'


@dataclass
class L2CommandData:
  deviceID: str
  seqNdx: int
  cmdNdx: int
  commandType: str
  commandName: str
  gssRow: int
  args: List[any] = field(default_factory=lambda: [])


class ProtocolData:
  def __init__(self, name: str, device_id_to_type: Dict, data: object):
    self.name = name
    self.devices = {}
    self.l2_commands = []

    self._load_protocol_data(device_id_to_type, data)

  def _load_protocol_data(self, device_id_to_type: Dict, data: object):
    try:
      layout = data[JSON_LAYOUT_KEY]
      layout_name = layout[JSON_LAYOUT_NAME_KEY]

      for haive in layout[JSON_LAYOUT_DATA_KEY]:
        haiveID = haive[JSON_HAIVE_ID_KEY]

        containers = []
        if JSON_CTN_IDS_KEY in haive:
          for ctnID, pos in haive[JSON_CTN_POS_KEY].items():
            device = Device.CONTAINER

            if ctnID not in device_id_to_type:
              raise KeyError(f"No device type found for given container ID `{ctnID}`. Please check `device_id_to_type` parameter passed to ProtocolData constructor!")

            deviceType = DeviceType(device_id_to_type[ctnID])
            ctnData = ContainerData(ctnID, device, deviceType, ContainerPosition(pos), haiveID)
            self.devices[ctnID] = ctnData
            containers.append(ctnData)

        device = Device.HAIVE

        if ctnID not in device_id_to_type:
          raise KeyError(f"No device type found for given HAIVE ID `{haiveID}`. Please check `device_id_to_type` parameter passed to ProtocolData constructor!")

        deviceType = DeviceType(device_id_to_type[haiveID])
        position = tuple(haive[JSON_HAIVE_POS_KEY])
        attachment = haive[JSON_ATTACH_KEY]
        if attachment:
          attachment = DeviceType(haive[JSON_ATTACH_KEY])
        tools = haive[JSON_TOOLS_KEY]
        if tools:
          _tools = []
          for t in tools:
            _tools.append(DeviceType(t))
          tools = _tools
        self.devices[haiveID] = HAIVEData(haiveID, device, deviceType, position, attachment, tools, containers)

        protocol = data[JSON_PROTOCOL_KEY]

      for i, sequence in enumerate(protocol):
        l2SequenceData = {}
        for deviceID, deviceSequence in sequence.items():
          l2SequenceData[deviceID] = []
          for j, cmd in enumerate(deviceSequence):
            commandType = cmd[JSON_CMD_TYPE_KEY]
            commandName = cmd[JSON_CMD_NAME_KEY]
            commandArgsData = cmd[JSON_CMD_ARGS_KEY]
            gssRow = cmd[JSON_CMD_GSS_KEY]
            cmdData = L2CommandData(deviceID, i, j, commandType, commandName, gssRow, commandArgsData)
            l2SequenceData[deviceID].append(cmdData)
        self.l2_commands.append(l2SequenceData)

    except:
      raise ValueError(f"Unable to initialize ProtocolData: No valid device description path was passed: \n{traceback.format_exc()}\n")
