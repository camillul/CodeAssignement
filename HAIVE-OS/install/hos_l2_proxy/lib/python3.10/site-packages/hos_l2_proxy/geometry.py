import numpy as np
from typing import Tuple
from math import sqrt

from hos_l2_proxy.common import ContainerPosition


# Angles a container or header has to be rotated in CCW direction with respect to HAIVE coordinate system
SLOT_ANGLES = {
  ContainerPosition.ONE: 150,
  ContainerPosition.THREE: 90,
  ContainerPosition.FIVE: 30,
  ContainerPosition.SEVEN: 330,
  ContainerPosition.NINE: 270,
  ContainerPosition.ELEVEN: 210
}

# Converts cartesian coordinates (x,y) from container coordinate space to haive coordinate space
def container_to_haive_coords(slot: ContainerPosition, x: float, y: float) -> (float, float):
  theta = np.radians(SLOT_ANGLES[slot])
  c, s = np.cos(theta), np.sin(theta)
  T = np.array(((c, -s, 0.0), (s, c, 0.0), (0, 0, 1)))
  pos = np.dot(T, (x, y, 1))
  return round(pos[0], 2), round(pos[1], 2)


def interpolate_between_indexed(p1: Tuple, p2: Tuple, index: int, size: int) -> (float, float):
  d = sqrt(pow(p2[0] - p1[0], 2) + pow(p2[1] - p1[1], 2))
  x = p1[0] + index * (d / (size - 1)) * (p2[0] - p1[0]) / d
  y = p1[1] + index * (d / (size - 1)) * (p2[1] - p1[1]) / d
  return round(x, 2), round(y, 2)

def interpolate_tube_position(x_ndx: int, y_ndx: int, bl_corner: Tuple, br_corner: Tuple, tl_corner: Tuple, tr_corner: Tuple) -> (float, float):
  p1 = interpolate_between_indexed(bl_corner, tl_corner, y_ndx, 4)
  p2 = interpolate_between_indexed(br_corner, tr_corner, y_ndx, 4)
  p3 = interpolate_between_indexed(p1, p2, x_ndx, 2)
  return p3

def interpolate_tip_position(x_ndx: int, y_ndx: int, bl_corner: Tuple, br_corner: Tuple, tl_corner: Tuple, tr_corner: Tuple) -> (float, float):
  p1 = interpolate_between_indexed(bl_corner, tl_corner, y_ndx, 12)
  p2 = interpolate_between_indexed(br_corner, tr_corner, y_ndx, 12)
  p3 = interpolate_between_indexed(p1, p2, x_ndx, 8)
  return p3
