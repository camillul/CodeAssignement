from typing import (Any, List)
import inspect

from rclpy.node import Node
from hos_utils.API import StateAPICallInfo, DeviceAPICallInfo, DeviceAPIArg
def create_state_api_call(device_id: str, function_name: str, args: List[DeviceAPIArg]) -> Any:
  """
  Return ROS_Request message

  this is function is actually called in hos_device_api.py and from this call : StateAPI.{function_name}({device_id},{args1, args2, ....})
  create a proper ROS request. in that way the user/developper don"t need to deal with service request.
  """
  #This is a resquest ros_msg that need to be given to a client later and send to a service
  #here we fill up the request with all the proper parameter
  r = GetStateAPICall.Request()
  r.device_id = device_id
  r.function_name = function_name
  for a in args:
    f = TypedField()
    f.name = a.arg_name
    f.type = a.arg_type
    f.data = a.arg_data
    r.args.append(f)
  return r

def send_state_api_call(node: Node, request: Any) -> StateAPICallInfo:  
  """
  Return StateAPICallInfo

  Create a ros_client and send the request (generated by create_device_api_call), since the call is async, it return a DeviceAPiCallInfo with a future object
  from which you can ask later : future.done() -> True or False according to the status of the DeviceAPI
  """
  node.get_logger().info("StateAPI send")
  api_client = node.create_client(GetStateAPICall, GET_STATE_API_CALL_SERVICE, callback_group=ReentrantCallbackGroup())
  while not api_client.wait_for_service(timeout_sec=1.0):
    node.get_logger().info("Waiting for state layer api service ...")
  call_time = time.time()
  
  future = api_client.call_async(request)
  #here we return a dataclass object helding call_time, future object, and client object.
  #from this inside your script/behavior/protocol, you should be able to track the status of this api_call with this dataclass.
  return StateAPICallInfo(call_time, future, api_client)

class StateAPIGen():
  def __init__(self) -> None:
    pass


#
# Start the cobot
#
  def state_cobot_start(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Set Vortexer speed
#
  def state_vortexer_rotation(self, node: Node, device_id: str, rotation_percentage: float) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'rotation_percentage',
      'float32',
      str(rotation_percentage),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Switch on all  slot's LED with a specific color and blink
#
  def state_haive_led_all_on(self, node: Node, device_id: str, r: int, g: int, b: int, blink_mode: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'r',
      'uint8',
      str(r),
    ),
    DeviceAPIArg(
      'g',
      'uint8',
      str(g),
    ),
    DeviceAPIArg(
      'b',
      'uint8',
      str(b),
    ),
    DeviceAPIArg(
      'blink_mode',
      'string',
      str(blink_mode),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Moves endeffector of Delta HAIVE to 3D coordinate (x, y, z) in mm
#
  def state_delta_arm_move(self, node: Node, device_id: str, x: float, y: float, z: float) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'x',
      'float32',
      str(x),
    ),
    DeviceAPIArg(
      'y',
      'float32',
      str(y),
    ),
    DeviceAPIArg(
      'z',
      'float32',
      str(z),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Set temperature in the container
#
  def state_tube_set_temp(self, node: Node, device_id: str, temperature: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'temperature',
      'int8',
      str(temperature),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Dispense volume (mililiter)
#
  def state_tecan_dispense(self, node: Node, device_id: str, volume_ml: float) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'volume_ml',
      'float32',
      str(volume_ml),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Run the PCR
#
  def state_pcr_run(self, node: Node, device_id: str, config_file_name: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'config_file_name',
      'string',
      str(config_file_name),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Return header position in it's own reference (for instance 0,0 isn't the same for each HAIVE).
#
  def state_delta_arm_get_all_laser_distance(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Set room temperature in the container
#
  def state_tube_room_temp(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Action cap related (open, close, ...) according to cap type
#
  def state_opener_cap(self, node: Node, device_id: str, action: str, cap_type: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'action',
      'string',
      str(action),
    ),
    DeviceAPIArg(
      'cap_type',
      'string',
      str(cap_type),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Moves endeffector of Delta HAIVE to 3D coordinate (x, y, z) in mm and rotates the tool header to specified slot position
#
  def state_delta_arm_move_r(self, node: Node, device_id: str, x: float, y: float, z: float, r: float) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'x',
      'float32',
      str(x),
    ),
    DeviceAPIArg(
      'y',
      'float32',
      str(y),
    ),
    DeviceAPIArg(
      'z',
      'float32',
      str(z),
    ),
    DeviceAPIArg(
      'r',
      'float32',
      str(r),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Give to concerned HAIVE, new parameters for kinematics equation
#
  def state_delta_arm_update_kinematics(self, node: Node, device_id: str, param_x1: float, param_y1: float, param_z1_offset: float, param_r1: float, param_x2: float, param_y2: float, param_z2_offset: float, param_r2: float, param_x3: float, param_y3: float, param_z3_offset: float, param_r3: float) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'param_x1',
      'float32',
      str(param_x1),
    ),
    DeviceAPIArg(
      'param_y1',
      'float32',
      str(param_y1),
    ),
    DeviceAPIArg(
      'param_z1_offset',
      'float32',
      str(param_z1_offset),
    ),
    DeviceAPIArg(
      'param_r1',
      'float32',
      str(param_r1),
    ),
    DeviceAPIArg(
      'param_x2',
      'float32',
      str(param_x2),
    ),
    DeviceAPIArg(
      'param_y2',
      'float32',
      str(param_y2),
    ),
    DeviceAPIArg(
      'param_z2_offset',
      'float32',
      str(param_z2_offset),
    ),
    DeviceAPIArg(
      'param_r2',
      'float32',
      str(param_r2),
    ),
    DeviceAPIArg(
      'param_x3',
      'float32',
      str(param_x3),
    ),
    DeviceAPIArg(
      'param_y3',
      'float32',
      str(param_y3),
    ),
    DeviceAPIArg(
      'param_z3_offset',
      'float32',
      str(param_z3_offset),
    ),
    DeviceAPIArg(
      'param_r3',
      'float32',
      str(param_r3),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Move the end effector to a position
#
  def state_cobot_go_to(self, node: Node, device_id: str, position: str, speed: int, wait_s: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'position',
      'string',
      str(position),
    ),
    DeviceAPIArg(
      'speed',
      'int8',
      str(speed),
    ),
    DeviceAPIArg(
      'wait_s',
      'uint8',
      str(wait_s),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Set magnet height in container
#
  def state_magnet_set_height(self, node: Node, device_id: str, height: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'height',
      'int8',
      str(height),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Stop the Vortexer
#
  def state_vortexer_stop(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Set speed and acceleration of delta arm motors on Delta HAIVE
#
  def state_delta_arm_set_speed(self, node: Node, device_id: str, speed: int, acceleration: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'speed',
      'uint32',
      str(speed),
    ),
    DeviceAPIArg(
      'acceleration',
      'uint32',
      str(acceleration),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# give data about the current device next to the RFID Reader.
#
  def state_RFID_get_current_device(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Move the container at a slot distance and speed
#
  def state_container_move(self, node: Node, device_id: str, distance: int, speed: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'distance',
      'int8',
      str(distance),
    ),
    DeviceAPIArg(
      'speed',
      'uint8',
      str(speed),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Returns a Container's current slot position, if the container is flipped on that position and the HAIVE ID it is positioned in
#
  def state_container_get_position(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Move the end effector to home position
#
  def state_cobot_move_home(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Move the turntable to a slot with a desired speed
#
  def state_turntable_move(self, node: Node, device_id: str, slot: int, speed: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'slot',
      'uint8',
      str(slot),
    ),
    DeviceAPIArg(
      'speed',
      'uint8',
      str(speed),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Switch on/off the slot
#
  def state_set_slot_power(self, node: Node, device_id: str, slot: int, is_on: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'slot',
      'uint8',
      str(slot),
    ),
    DeviceAPIArg(
      'is_on',
      'uint8',
      str(is_on),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Grab a tube with an opener tool
#
  def state_opener_grab_tube(self, node: Node, device_id: str, is_grab: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'is_grab',
      'uint8',
      str(is_grab),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Open the PCR lid
#
  def state_pcr_lid(self, node: Node, device_id: str, is_open: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'is_open',
      'uint8',
      str(is_open),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Switch off all all  slot's LED
#
  def state_haive_led_all_off(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Move the AGV elevator on the container
#
  def state_container_agv_elevation(self, node: Node, device_id: str, action: str, repeat: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'action',
      'string',
      str(action),
    ),
    DeviceAPIArg(
      'repeat',
      'uint8',
      str(repeat),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Switch off LEDs on a container

#
  def state_container_led_off(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Grab an object by asking angle rotation of a motor
#
  def state_cobot_gripper_move(self, node: Node, device_id: str, angle: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'angle',
      'int8',
      str(angle),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Container grabbing tubes (should be executed before cap opening for instance)
#
  def state_tube_grab(self, node: Node, device_id: str, is_grab: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'is_grab',
      'uint8',
      str(is_grab),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Eject teach tip from device
#
  def state_tecan_eject_tip(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Remove tip from dispenser
#
  def state_dispenser_dispose_tip(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Switch on a LED on a slot with a specific color, slot and blink
#
  def state_haive_led_slot_on(self, node: Node, device_id: str, slot: int, r: int, g: int, b: int, blink_mode: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'slot',
      'uint8',
      str(slot),
    ),
    DeviceAPIArg(
      'r',
      'uint8',
      str(r),
    ),
    DeviceAPIArg(
      'g',
      'uint8',
      str(g),
    ),
    DeviceAPIArg(
      'b',
      'uint8',
      str(b),
    ),
    DeviceAPIArg(
      'blink_mode',
      'string',
      str(blink_mode),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Write information on container RFID
#
  def state_container_rfid_info_write(self, node: Node, device_id: str, container_id: str, is_flipped: bool, available_tips: int, tube_info1: str, tube_info2: str, tube_info3: str, tube_info_4: str, timestamp: float) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'container_id',
      'string',
      str(container_id),
    ),
    DeviceAPIArg(
      'is_flipped',
      'bool',
      str(is_flipped),
    ),
    DeviceAPIArg(
      'available_tips',
      'uint8',
      str(available_tips),
    ),
    DeviceAPIArg(
      'tube_info1',
      'string',
      str(tube_info1),
    ),
    DeviceAPIArg(
      'tube_info2',
      'string',
      str(tube_info2),
    ),
    DeviceAPIArg(
      'tube_info3',
      'string',
      str(tube_info3),
    ),
    DeviceAPIArg(
      'tube_info_4',
      'string',
      str(tube_info_4),
    ),
    DeviceAPIArg(
      'timestamp',
      'float32',
      str(timestamp),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Returns a HAIVE's position in a hexagonal grid, where x stands for the row and y for the column
#
  def state_haive_get_position(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Dispense a certain amount of volume with parameter : -start / end or the z movement during the dispensing (if start is above end, it will take liquid and if start if below end it will put liquid) - repeat : allow to create some kind of mixing by repeating the dispensing process.
#
  def state_dispenser_pipet(self, node: Node, device_id: str, amount_ul: float, speed_mode: str, start: float, end: float, repeat: int) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'amount_ul',
      'float32',
      str(amount_ul),
    ),
    DeviceAPIArg(
      'speed_mode',
      'string',
      str(speed_mode),
    ),
    DeviceAPIArg(
      'start',
      'float32',
      str(start),
    ),
    DeviceAPIArg(
      'end',
      'float32',
      str(end),
    ),
    DeviceAPIArg(
      'repeat',
      'uint8',
      str(repeat),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Flush all the liquid in the tip
#
  def state_dispenser_flush(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Moves Delta HAIVE into home position
#
  def state_delta_arm_move_home(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Read information on container RFID
#
  def state_container_rifid_info_read(self, node: Node, device_id: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")


#
# Switch on a LED on a container with a specific index, color, slot and blink
#
  def state_container_led_on(self, node: Node, device_id: str, x: int, y: int, r: int, g: int, b: int, blink_mode: str) -> StateAPICallInfo:
    function_name = inspect.stack()[0][3]
    args = [
      DeviceAPIArg(
      'x',
      'uint8',
      str(x),
    ),
    DeviceAPIArg(
      'y',
      'uint8',
      str(y),
    ),
    DeviceAPIArg(
      'r',
      'uint8',
      str(r),
    ),
    DeviceAPIArg(
      'g',
      'uint8',
      str(g),
    ),
    DeviceAPIArg(
      'b',
      'uint8',
      str(b),
    ),
    DeviceAPIArg(
      'blink_mode',
      'string',
      str(blink_mode),
    ),
    ]
    raise Exception("This state function has not been updated, please override this function in StateAPI Class")

