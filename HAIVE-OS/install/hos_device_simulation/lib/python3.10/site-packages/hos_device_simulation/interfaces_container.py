from typing import Dict
import math

from rclpy.node import Node

from hos_device_simulation.device_interface import DeviceInterface
from hos_robot_state.haive_graph import ContainerDirection


class BaseContainerInterface(DeviceInterface):
  def __init__(self, uid: int, simulation_node: Node, haive_uid: int, slot: int) -> None:
    super().__init__(uid, simulation_node)
    self._haive_uid = haive_uid

    haive_id = self._db.get_device_id(haive_uid)
    if haive_id == None:
      raise ValueError(f"No device id entry found for device uid {uid} in database!")

    self._haive_id = haive_id
    self._slot = slot
    self._is_flipped = False
    self._motor_position = 0

  def power_on(self):
    super().power_on()

    self._register_device_command('container_move', self.cmd_container_move)
    self._register_device_command('container_led_off', self.cmd_container_led_off)
    self._register_device_command('container_led_on', self.cmd_container_led_on)
    self._register_device_command('container_get_position', self.cmd_get_position)

    # TODO: This is handled by HAIVE OS db???
    self._register_stream('container_motor')

  def cmd_container_move(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_container_move >> {serialized_cmd}")

    cmd = self._deserialize_cmd(serialized_cmd)

    distance = int(cmd[3])
    dir = ContainerDirection.FW if distance > 0 else ContainerDirection.BW
    motor_distance = 0
    for _ in range(abs(distance)):
      _, _, haive_id1 = self._haive_graph.get_container_position(self._device_id)
      self._haive_graph.transit(self._device_id, dir)
      _, _, haive_id2 = self._haive_graph.get_container_position(self._device_id)

      # Move between zero and non-zero slot
      if haive_id1 == haive_id2:
        # Digital Twin Distance
        motor_distance += 0.172
      # Move between non-zero and non-zero slot
      else:
        # Digital Twin Distance
        motor_distance += 0.2560171

    slot, is_flipped, haive_id = self._haive_graph.get_container_position(self._device_id)
    self._haive_id = haive_id

    haive_uid = self._db.get_device_uid(haive_id)
    if haive_uid == None:
      error = f"No device uid entry found for device id {haive_id} in database!"
      self._logger.error(f"CRITICAL ERROR: {error}")
      self._report_cmd_result(cmd_data['cmd_id'], False, error)
      return

    self._haive_uid = haive_uid
    self._slot = slot
    self._is_flipped = is_flipped

    cmd_data = {
      'cmd_id': cmd_id,
      'distance': motor_distance,
      'factor': dir.value,
      'elapsed': 0.0,
      'duration': 3.0,
    }

    simulate_streams = self._node.get_parameter('simulate_streams').get_parameter_value().bool_value
    if not simulate_streams:
      self._report_cmd_result(cmd_data['cmd_id'], True)
    else:
      self._client.call_later(0.033, lambda: self._simulate_container_move(cmd_data))

  def _simulate_container_move(self, cmd_data: Dict):
    if cmd_data['elapsed'] < cmd_data['duration']:
      def ease_out_sine(x: float) -> float:
        return math.sin((x * math.pi) / 2.0)

      def lerp(from_value: float, to_value: float, t: float) -> float:
        return from_value * (1.0 - t) + (to_value * t)

      value = lerp(0.0, cmd_data['distance'], ease_out_sine(cmd_data['elapsed']/cmd_data['duration']))
      self._stream_data('container_motor', f"{self._motor_position + value * cmd_data['factor']}")

      cmd_data['elapsed'] += 0.033
      self._client.call_later(0.033, lambda: self._simulate_container_move(cmd_data))
    else:
      self._stream_data('container_motor', f"{self._motor_position + cmd_data['distance'] * cmd_data['factor']}")
      self._motor_position += cmd_data['factor'] * cmd_data['distance']
      self._report_cmd_result(cmd_data['cmd_id'], True)

  def cmd_container_led_off(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_container_led_off >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_container_led_on(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_container_led_on >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_get_position(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_get_position >> {serialized_cmd}")
    # res = {
    #   'slot': self._slot,
    #   'uid': self._haive_uid,
    # }
    res = f"V{self._slot}V{self._is_flipped}V{self._haive_id}"
    self._report_cmd_result(cmd_id, True, res)

class FalconContainerInterface(BaseContainerInterface):
  def __init__(self, uid: int, simulation_node: Node, haive_uid: int, slot: int) -> None:
    super().__init__(uid, simulation_node, haive_uid, slot)

  def power_on(self):
    super().power_on()

    self._register_device_command('tube_grab', self.cmd_tube_grab)
    self._register_device_command('tube_set_temp', self.cmd_tube_set_temp)
    self._register_device_command('tube_room_temp', self.cmd_tube_room_temp)

  def cmd_tube_grab(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_tube_grab >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_tube_set_temp(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_tube_set_temp >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_tube_room_temp(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_tube_room_temp >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)


class ScrewContainerInterface(BaseContainerInterface):
  def __init__(self, uid: int, simulation_node: Node, haive_uid: int, slot: int) -> None:
    super().__init__(uid, simulation_node, haive_uid, slot)

  def power_on(self):
    super().power_on()

    self._register_device_command('tube_set_temp', self.cmd_tube_set_temp)
    self._register_device_command('tube_room_temp', self.cmd_tube_room_temp)

  def cmd_tube_set_temp(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_tube_set_temp >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_tube_room_temp(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_tube_room_temp >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

class MagnetContainerInterface(BaseContainerInterface):
  def __init__(self, uid: int, simulation_node: Node, haive_uid: int, slot: int) -> None:
    super().__init__(uid, simulation_node, haive_uid, slot)

  def power_on(self):
    super().power_on()

    self._register_device_command('magnet_set_height', self.cmd_magnet_set_height)

  def cmd_magnet_set_height(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_magnet_set_height >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)
