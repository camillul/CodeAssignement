import rclpy
import argparse
from threading import Thread
from rclpy.node import Node
from std_msgs.msg import Int8
from std_msgs.msg import UInt32
from rclpy.executors import MultiThreadedExecutor
from hos_device_layer.services import (CONNECT_DEVICE_SERVICE, DEVICE_API_CALL_SERVICE, DEVICE_COMMAND_SERVICE, 
                                       SERIALIZED_DEVICE_COMMAND_SERVICE, DEVICE_CONNECTION_INFOS_SERVICE, GET_STATE_API_CALL_SERVICE, SET_STATE_API_CALL_SERVICE)
from hos_device_layer.topics import (DEVICE_API_CALL_RESULT_TOPIC, DEVICE_PING_TOPIC, DEVICE_CMD_RESULT_TOPIC, DEVICE_STREAM_TOPIC,
                                     DEVICE_CONNECTED, DEVICE_TIMEOUT, DEVICE_RECONNECTED, DEVICE_DISCONNECTED)

from hos_interfaces.msg import (DeviceCommandResult, DeviceAPICallResult, TypedField, DeviceStream, ConnectionInfo)
from hos_interfaces.srv import (ConnectDevice, DeviceCommand, SerializedDeviceCommand, DeviceAPICall, DeviceConnectionInfos, GetStateAPICall, SetStateAPICall )
from rclpy.client import (Future, Client)

from rclpy.callback_groups import (MutuallyExclusiveCallbackGroup, ReentrantCallbackGroup)
import hos_device_layer.hos_device_api as DeviceAPI
from hos_device_layer.device_manager import DeviceManager
from hos_robot_state.state_manager import RobotStateNode
from hos_robot_state.constants import std_msg_dict, StateType
from hos_interfaces.srv import (GetStateAPICall)
import hos_utils.hos as Hos
from hos_device_layer.device_manager import (create_device_api_call, send_device_api_call, DeviceAPIArg, StateAPICallInfo)

import sys
import json
import time
import pytest


node_name = "fake_device_node"
spin_rate = 0

class FakeConnectionNode(Node):
  def __init__(self, node_name: str, device_id :str = "C4002", device_uid :int= 4, device_manager_node = None, state_manager_node = None, share_callback_group = None):
    super().__init__(node_name)
    if share_callback_group:
      self.cb_group = share_callback_group
    else:
      self.cb_group = ReentrantCallbackGroup()

    self._state_api_call_infos = []
    self._api_call_infos  = []
    self.device_publisher = self.create_publisher(UInt32, DEVICE_PING_TOPIC, 10, callback_group= ReentrantCallbackGroup())
    self.device_manager_node = device_manager_node
    self.state_manager_node = state_manager_node
    self.fake_ping_timer = []
    self.device_id = str(device_id)
    self.device_uid = int(device_uid)
    self.fake_device_connection()


  def fake_cmd_callback(self, request, response):
    """
    Return Future

    create a fake response, in that case the cmd is always a sucess
    """
    response.succes = True
    return response

  def fake_device_connection_callback(self):
    """
    Return None

    Create fake ping, this function should be called inside a ros timer
    """
    ping_msg =  UInt32()
    ping_msg.data = self.device_uid
    self.device_publisher.publish(ping_msg)
    self.get_logger().info(f'Publishing: ping uid : {ping_msg.data}')

  def fake_device_connection(self,):
    """
    Return None

    create a device connection msg, simulating the connection of a device.
    """
    TEST_DEVICE_CMD_SERVICE ="haive_os/device/uid"+str(self.device_uid)+"/serialized_command"
    self.cmd_device_service = self.create_service(SerializedDeviceCommand, TEST_DEVICE_CMD_SERVICE, self.fake_cmd_callback, callback_group= ReentrantCallbackGroup())
    self.connection_client = self.create_client(ConnectDevice, CONNECT_DEVICE_SERVICE, callback_group= ReentrantCallbackGroup())
    req = ConnectDevice.Request()
    req.uid = self.device_uid
    if self.connection_client:
      while not self.connection_client.wait_for_service(timeout_sec=5.0):
        self.get_logger().info('service not available, waiting again...')
    else:
      raise Exception("issue at creating client for device, check device_manager")
    print("connection request sended")
    self.connection_response = self.connection_client.call_async(req)
    while not self.connection_response.done():
      print("spinning for connection")
      rclpy.spin_once(self)
      pass
    print(f'response : {self.connection_response.result().success}')
    print("timer created")
    timer_period = 2
    self.fake_ping_timer.append(self.create_timer(timer_period, self.fake_device_connection_callback, callback_group =  MutuallyExclusiveCallbackGroup()))
    self.i = 0

def main(args=None):
  rclpy.init(args=args)

  # Parse arguments
  parser = argparse.ArgumentParser()
  parser.add_argument('-id', '--device-id')
  parser.add_argument('-uid','--device-uid' )
  parsed_args = parser.parse_args(sys.argv[1:])

  node = FakeConnectionNode(node_name, parsed_args.device_id, parsed_args.device_uid)
  node.get_logger().info(f"Running {node_name}")
  executor = MultiThreadedExecutor()
  executor.add_node(node)
  executor.spin()

  #TODO:Ricky:give device_id and device_uid in args
  node.fake_device_connection()
  node.destroy_node()
  rclpy.shutdown()

if __name__ == '__main__':
  main()

