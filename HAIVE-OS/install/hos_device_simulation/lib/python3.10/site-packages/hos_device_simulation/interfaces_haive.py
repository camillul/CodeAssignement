from typing import Dict

from rclpy.node import Node

from hos_device_simulation.device_interface import DeviceInterface


class BaseHaiveInterface(DeviceInterface):
  def __init__(self, uid: int, simulation_node: Node, position_x: int, position_y: int) -> None:
    super().__init__(uid, simulation_node)
    self._position = (position_x, position_y)

  def power_on(self):
    super().power_on()

    self._register_device_command('haive_led_all_off', self.cmd_led_all_off)
    self._register_device_command('haive_led_all_on', self.cmd_led_all_on)
    self._register_device_command('haive_led_slot_on', self.cmd_led_slot_on)
    self._register_device_command('turntable_move', self.cmd_turntable_move)
    self._register_device_command('set_slot_power', self.cmd_slot_power)
    self._register_device_command('haive_get_position', self.cmd_get_position)

    # TODO: This is handled by HAIVE OS db???
    self._register_stream('turntable_motor')

  def cmd_led_all_off(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_led_all_off >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_led_all_on(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_led_all_on >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_led_slot_on(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_led_slot_on >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_turntable_move(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_turntable_move >> {serialized_cmd}")

    cmd = self._deserialize_cmd(serialized_cmd)

    from_slot = self._haive_graph.get_turntable_position(self._device_id)
    to_slot = int(cmd[3])

    self._logger.info(f"cmd_turntable_move >> from_slot:{from_slot}, to_slot:{to_slot}")

    self._haive_graph.move_turntable(self._device_id, to_slot)

    turntable_values = {
      1:  300, # 1918,
      # delta: 143
      3:  0, # 1775,
      # delta: 141
      5:  60, # 1634,
      # delta: 137
      # Flips side
      7:  120, # 1497,
      # delta: 145
      9:  180, #1352,
      # delta: 138
      11: 240, # 1214
      # delta: 704
    }
    from_value = turntable_values[from_slot]
    to_value = turntable_values[to_slot]

    diff = abs(from_value - to_value)
    distance = min(diff, 360 - diff)

    factor = -1.0 if ((from_value - to_value) + 360) % 360 < 180 else 1.0

    cmd_data = {
      'cmd_id': cmd_id,
      'from_value': from_value,
      'to_value': to_value,
      'distance': distance,
      'factor': factor,
      'elapsed': 0.0,
      'duration': 1.0,
    }
    self._logger.info(f"##### cmd_turntable_move >> cmd_data:{cmd_data}")

    simulate_streams = self._node.get_parameter('simulate_streams').get_parameter_value().bool_value
    if not simulate_streams:
      self._report_cmd_result(cmd_data['cmd_id'], True)
    else:
      self._client.call_later(0.033, lambda: self._simulate_turntable(cmd_data))

  def _simulate_turntable(self, cmd_data: Dict):
    if cmd_data['elapsed'] < cmd_data['duration']:
      def ease_out_expo(x: float) -> float:
        if x == 1.0:
          return 1.0
        return 1.0 - pow(2.0, -10.0 * x)

      def lerp(from_value: float, to_value: float, t: float) -> float:
        return from_value * (1.0 - t) + (to_value * t)

      value = lerp(0.0, cmd_data['distance'], ease_out_expo(cmd_data['elapsed']/cmd_data['duration']))
      self._stream_data('turntable_motor', str((cmd_data['from_value'] + value * cmd_data['factor']) % 360))

      cmd_data['elapsed'] += 0.033
      self._client.call_later(0.033, lambda: self._simulate_turntable(cmd_data))
    else:
      self._stream_data('turntable_motor', str((cmd_data['from_value'] + cmd_data['distance'] * cmd_data['factor']) % 360))
      self._report_cmd_result(cmd_data['cmd_id'], True)

  def cmd_slot_power(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_slot_power >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_get_position(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_get_position >> {serialized_cmd}")
    # res = {
    #   'x': self._position[0],
    #   'y': self._position[1],
    # }
    res = f"V{self._position[0]}V{self._position[1]}"
    self._report_cmd_result(cmd_id, True, res)

class DeltaHaiveInterface(BaseHaiveInterface):
  def __init__(self, uid: int, simulation_node: Node, position_x: int, position_y: int) -> None:
    super().__init__(uid, simulation_node, position_x, position_y)

  def power_on(self):
    super().power_on()

    self._register_device_command('delta_arm_set_speed', self.cmd_delta_arm_set_speed)
    self._register_device_command('delta_arm_move_home', self.cmd_delta_arm_move_home)
    self._register_device_command('delta_arm_move', self.cmd_delta_arm_move)
    self._register_device_command('delta_arm_move_r', self.cmd_delta_arm_move_r)
    self._register_device_command('dispenser_pipet', self.cmd_dispenser_pipet)
    self._register_device_command('dispenser_flush', self.cmd_dispenser_flush)
    self._register_device_command('dispenser_dispose_tip', self.cmd_dispenser_dispose_tip)
    self._register_device_command('opener_grab_tube', self.cmd_opener_grab_tube)
    self._register_device_command('opener_cap', self.cmd_opener_cap)

  def cmd_delta_arm_set_speed(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_delta_arm_set_speed >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_delta_arm_move_home(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_delta_arm_move_home >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_delta_arm_move(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_delta_arm_move >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_delta_arm_move_r(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_delta_arm_move_r >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_dispenser_pipet(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_dispenser_pipet >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_dispenser_flush(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_dispenser_flush >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_dispenser_dispose_tip(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_dispenser_dispose_tip >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_opener_grab_tube(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_opener_grab_tube >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)

  def cmd_opener_cap(self, cmd_id: int, serialized_cmd: str):
    self._logger.info(f"uid-{self._uid}, cmd-{cmd_id}: cmd_opener_cap >> {serialized_cmd}")
    self._report_cmd_result(cmd_id, True)
