import sys
import argparse
from typing import (Dict, List)

import rclpy
from rclpy.node import Node

from hos_device_simulation.device_interface import DeviceInterface
from hos_device_simulation.interfaces_haive import *
from hos_device_simulation.interfaces_container import *
from hos_robot_state.haive_graph import (HAIVEGraph, HAIVEInfo, ContainerInfo)
from hos_device_layer.db import Database
import hos_utils.airtable as Airtable
import hos_utils.file as FileUtils


node_name = 'simulation_haive4'

class Haive4Simulation(Node):
  def __init__(self, layout_path: str, simulate_streams: bool = False):
    super().__init__(node_name)
    self._device_interfaces = {}

    self.haive_graph = None

    layout_data, error = FileUtils.load_json(layout_path)
    if error:
      raise ValueError(f"Critical error when loading layout data:\n{error}")

    error, db_data = Airtable.load_db_from_file(layout_data['fleet'])
    if error:
      raise ValueError(error)
    self.db = Database(db_data)

    self.declare_parameter('simulate_streams', simulate_streams)

    self._setup_devices(layout_data)

  def _setup_devices(self, layout_data: Dict):
    haive_info_list = [HAIVEInfo(h['haive_id'], h['position'][0], h['position'][1]) for h in layout_data['layout']]
    container_info_list = [ContainerInfo(ctn_id, slot, h['haive_id']) for h in layout_data['layout'] for ctn_id, slot in h['containers'].items()]
    self.haive_graph = HAIVEGraph(haive_info_list, container_info_list)

    for h in layout_data['layout']:
      haive_id = h['haive_id']
      haive_pos = h['position']

      haive_uid = self.db.get_device_uid(haive_id)
      if haive_uid == None:
        raise ValueError(f"No device uid entry found for device id {haive_id} in database!")

      device_info = self.db.get_device_info(haive_id)
      if device_info == None:
        raise ValueError(f"No device info entry found for device id {haive_id} in database!")

      device_type = device_info.device_type
      interface_args = [int(haive_uid), self, haive_pos[0], haive_pos[1]]
      device_interface, error = self._create_device_interface(device_type, interface_args)
      if error:
        raise ValueError(f"Critical error when setting up devices:\n{error}")
      self._device_interfaces[haive_id] = device_interface

      containers = h['containers']
      for ctn_id, slot in containers.items():
        ctn_uid = self.db.get_device_uid(ctn_id)
        if ctn_uid == None:
          raise ValueError(f"No device uid entry found for device id {ctn_id} in database!")

        device_info = self.db.get_device_info(ctn_id)
        if device_info == None:
          raise ValueError(f"No device info entry found for device id {ctn_id} in database!")

        device_type = device_info.device_type
        interface_args = [int(ctn_uid), self, int(haive_uid), slot]
        device_interface, error = self._create_device_interface(device_type, interface_args)
        if error:
          raise ValueError(f"Critical error when setting up devices:\n{error}")
        self._device_interfaces[ctn_id] = device_interface

    for interface in self._device_interfaces.values():
      interface.power_on()

  def _create_device_interface(self, device_type: str, interface_args: List) -> (DeviceInterface, str):
    # TODO: Get keys from hos_device_layer.db?
    device_interface_lookup = {
      "DeltaHaive": lambda: DeltaHaiveInterface(*interface_args),
      "BaseHaive": lambda: BaseHaiveInterface(*interface_args),
      "Falcon Tube": lambda: FalconContainerInterface(*interface_args),
      "1.5mL Tube": lambda: ScrewContainerInterface(*interface_args),
      "Magnet": lambda: MagnetContainerInterface(*interface_args),
      "P200 Tip": lambda: BaseContainerInterface(*interface_args),
      "P1000 Tip": lambda: BaseContainerInterface(*interface_args),
      "Disposal": lambda: BaseContainerInterface(*interface_args),
      "P200 Attachment": lambda: BaseContainerInterface(*interface_args),
      "P1000 Attachment": lambda: BaseContainerInterface(*interface_args),
      "Microplate": lambda: BaseContainerInterface(*interface_args),
    }

    if device_type not in device_interface_lookup:
      return None, f"Unable to initialize DeviceInterface. Invalid device type `{device_type}` was passed."

    return device_interface_lookup[device_type](), ""


def main(args=None):
  rclpy.init(args=args)

  # Parse arguments
  parser = argparse.ArgumentParser()
  parser.add_argument('-l', '--layout')
  parser.add_argument('--simulate-streams', action=argparse.BooleanOptionalAction, default=False)
  parsed_args = parser.parse_args(sys.argv[1:-3])

  node = Haive4Simulation(parsed_args.layout, parsed_args.simulate_streams)

  node.get_logger().info(f"Running {node_name}")
  rclpy.spin(node)

  node.destroy_node()
  rclpy.shutdown()

if __name__ == '__main__':
  main()
